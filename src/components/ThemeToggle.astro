---
// src/components/DarkLightToggle.astro
---
<style is:global>
   .toggle-button {
      background: #000;
      color: #fff;
      border: none;
      cursor: pointer;
      font-size: 1.5rem;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background-color 0.3s, color 0.3s;
    }
  
  </style>
  <button id="theme-toggle" class="toggle-button" aria-label="Toggle dark mode">
    <i id="theme-icon" class="ti"></i>
  </button>
  
  <script client:load>
    const themeToggle = document.getElementById('theme-toggle');
    const themeIcon = document.getElementById('theme-icon');
  
    // PicoCSS expects the <html> element to have a data-theme attribute
    function updateTheme(theme) {
      if (theme === 'dark') {
        document.documentElement.setAttribute('data-theme', 'dark');
        // When dark, show a sun icon so user can switch to light mode.
        themeIcon.className = 'ti ti-sun';
        localStorage.setItem('theme', 'dark');
        // Optionally update button colors if you wish to override PicoCSS defaults:
        themeToggle.style.backgroundColor = '#fff';
        themeToggle.style.color = '#000';
      } else {
        document.documentElement.setAttribute('data-theme', 'light');
        // When light, show a moon icon so user can switch to dark mode.
        themeIcon.className = 'ti ti-moon';
        localStorage.setItem('theme', 'light');
        themeToggle.style.backgroundColor = '#000';
        themeToggle.style.color = '#fff';
      }
    }
  
    const savedTheme = localStorage.getItem('theme') || 'light';
    updateTheme(savedTheme);
  
    themeToggle.addEventListener('click', () => {
      const currentTheme = localStorage.getItem('theme') || 'light';
      updateTheme(currentTheme === 'light' ? 'dark' : 'light');
    });
  </script>
  